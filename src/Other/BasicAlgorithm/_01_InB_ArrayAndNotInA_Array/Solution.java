package Other.BasicAlgorithm._01_InB_ArrayAndNotInA_Array;

/*
 * 一个有序数组 A，另一个无序数组 B，请打印 B 中的所有不在 A 中的数。
 * A 数组长度为 N，B 数组长度为 M。
 *
 * 法一：二分法，每次砍掉数组中一半的数 O(logN)
 * 对于数组 B 中的每一个数，都在 A 中通过二分的方式找一下，所以时间复杂度是 O(M*logN)。
 *
 * 法二：先把数组 B 排序，然后用类似外排的方式打印所有不在 A 中出现的数。
 * 例如 A:1、2、4、6、7
 *      B:6、3、9
 *  1. 将数组 B 排序，即 3、6、9；
 *  2. 设置指针 a 指向数组 A 中的第一个元素，设置指针 b 指向数组 B 中的第一个元素；
 *  3. 比较 a 和 b 的大小，如果 a < b，则让 a 后移；假如此时 a 指向 4，b 指向 3，即 a > b，说明 4 之前的数都比 3 小，
 *  这时输出 b，也就是 3。然后后移 a 和 b，这时 a 和 b 都指向 6，则不打印，然后再往后移，直至结束。
 *  4. 若 b < a，则打印 b 并后移 b；若 b = a，则不打印 b，b 也得后移；除此之外，都是 a 移动。
 *
 *  最差情况下，a 移动 N 位，b 移动 M 位，则时间复杂度为 O(N+M)，再加上需要将数组 B 进行排序 O(M*logM)，
 *  由于不能确定样本量 N 和 M 的大小，所以总的时间复杂度就是 O(M*logM)+O(N+M)。
 */
public class Solution {
}
